# Production-like Staging Environment
# Comprehensive multi-service deployment for staging validation

version: '3.8'

services:
  # PostgreSQL Database
  postgres-staging:
    image: postgres:15-alpine
    container_name: postgres-staging
    environment:
      POSTGRES_DB: musicgen_staging
      POSTGRES_USER: musicgen
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-staging_password_change_me}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-staging-data:/var/lib/postgresql/data
      - ./scripts/sql/init_staging.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U musicgen -d musicgen_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - staging-network

  # Redis for caching and task queues
  redis-staging:
    image: redis:7-alpine
    container_name: redis-staging
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-staging_redis_password}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-staging-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - staging-network

  # Main API Service (Multiple instances for load balancing)
  musicgen-api-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: musicgen-api-1
    environment:
      - CONFIG_PATH=configs/app/staging.yaml
      - POSTGRES_HOST=postgres-staging
      - REDIS_HOST=redis-staging
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-staging_password_change_me}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-staging_redis_password}
      - JWT_SECRET=${JWT_SECRET:-staging_jwt_secret_change_me_32_chars}
      - SESSION_SECRET=${SESSION_SECRET:-staging_session_secret_change_me}
      - CSRF_SECRET=${CSRF_SECRET:-staging_csrf_secret_change_me}
      - STAGING_API_KEY=${STAGING_API_KEY:-staging_api_key_change_me}
      - WANDB_API_KEY=${WANDB_API_KEY:-disabled}
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    volumes:
      - staging-models:/app/models:ro
      - staging-data:/app/data:ro
      - staging-logs:/app/logs
      - staging-outputs:/app/outputs
    ports:
      - "8001:8000"
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - staging-network

  musicgen-api-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: musicgen-api-2
    environment:
      - CONFIG_PATH=configs/app/staging.yaml
      - POSTGRES_HOST=postgres-staging
      - REDIS_HOST=redis-staging
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-staging_password_change_me}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-staging_redis_password}
      - JWT_SECRET=${JWT_SECRET:-staging_jwt_secret_change_me_32_chars}
      - SESSION_SECRET=${SESSION_SECRET:-staging_session_secret_change_me}
      - CSRF_SECRET=${CSRF_SECRET:-staging_csrf_secret_change_me}
      - STAGING_API_KEY=${STAGING_API_KEY:-staging_api_key_change_me}
      - WANDB_API_KEY=${WANDB_API_KEY:-disabled}
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    volumes:
      - staging-models:/app/models:ro
      - staging-data:/app/data:ro
      - staging-logs:/app/logs
      - staging-outputs:/app/outputs
    ports:
      - "8002:8000"
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - staging-network

  # Celery Workers for background tasks
  musicgen-worker-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: musicgen-worker-1
    command: >
      celery -A music_gen.workers.celery_app worker 
      --loglevel=info 
      --concurrency=2 
      --hostname=worker-1@%h
      --queues=generation,training,processing
    environment:
      - CONFIG_PATH=configs/app/staging.yaml
      - POSTGRES_HOST=postgres-staging
      - REDIS_HOST=redis-staging
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-staging_password_change_me}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-staging_redis_password}
      - WORKER_TYPE=generation
    volumes:
      - staging-models:/app/models:ro
      - staging-data:/app/data:ro
      - staging-logs:/app/logs
      - staging-outputs:/app/outputs
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staging-network

  musicgen-worker-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: musicgen-worker-2
    command: >
      celery -A music_gen.workers.celery_app worker 
      --loglevel=info 
      --concurrency=2 
      --hostname=worker-2@%h
      --queues=generation,training,processing
    environment:
      - CONFIG_PATH=configs/app/staging.yaml
      - POSTGRES_HOST=postgres-staging
      - REDIS_HOST=redis-staging
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-staging_password_change_me}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-staging_redis_password}
      - WORKER_TYPE=processing
    volumes:
      - staging-models:/app/models:ro
      - staging-data:/app/data:ro
      - staging-logs:/app/logs
      - staging-outputs:/app/outputs
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staging-network

  # Celery Flower for task monitoring
  flower-staging:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: flower-staging
    command: >
      celery -A music_gen.workers.celery_app flower 
      --basic_auth=admin:${FLOWER_PASSWORD:-staging_flower_password}
      --broker=redis://:${REDIS_PASSWORD:-staging_redis_password}@redis-staging:6379/0
    environment:
      - REDIS_HOST=redis-staging
      - REDIS_PASSWORD=${REDIS_PASSWORD:-staging_redis_password}
    ports:
      - "5555:5555"
    depends_on:
      redis-staging:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staging-network

  # Load Balancer (Nginx)
  nginx-staging:
    image: nginx:alpine
    container_name: nginx-staging
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - staging-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - musicgen-api-1
      - musicgen-api-2
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - staging-network

  # Prometheus for metrics collection
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: prometheus-staging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    volumes:
      - ./configs/monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/monitoring/rules:/etc/prometheus/rules:ro
      - ./configs/monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus-staging-data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - staging-network

  # Grafana for visualization
  grafana-staging:
    image: grafana/grafana:latest
    container_name: grafana-staging
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-staging_grafana_password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-staging-data:/var/lib/grafana
      - ./configs/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/monitoring/grafana/datasources-staging.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus-staging
    restart: unless-stopped
    networks:
      - staging-network

  # PostgreSQL Exporter for database metrics
  postgres-exporter-staging:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-staging
    environment:
      DATA_SOURCE_NAME: "postgresql://musicgen:${POSTGRES_PASSWORD:-staging_password_change_me}@postgres-staging:5432/musicgen_staging?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres-staging:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staging-network

  # Redis Exporter for cache metrics
  redis-exporter-staging:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter-staging
    environment:
      REDIS_ADDR: "redis://:${REDIS_PASSWORD:-staging_redis_password}@redis-staging:6379"
    ports:
      - "9121:9121"
    depends_on:
      redis-staging:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staging-network

  # Node Exporter for system metrics
  node-exporter-staging:
    image: prom/node-exporter:latest
    container_name: node-exporter-staging
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - staging-network

  # cAdvisor for container metrics
  cadvisor-staging:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-staging
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - staging-network

  # Elasticsearch for log aggregation
  elasticsearch-staging:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-staging
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-staging-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - staging-network

  # Logstash for log processing
  logstash-staging:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash-staging
    volumes:
      - ./configs/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - staging-logs:/app/logs:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      elasticsearch-staging:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staging-network

  # Kibana for log visualization
  kibana-staging:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana-staging
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-staging:9200
      - XPACK_SECURITY_ENABLED=false
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch-staging:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - staging-network

  # Load Testing Service
  load-tester:
    build:
      context: .
      dockerfile: Dockerfile.load-test
    container_name: load-tester
    volumes:
      - ./tests/load:/app/tests/load
      - load-test-results:/app/results
    environment:
      - TARGET_HOST=nginx-staging
      - TARGET_PORT=80
      - TEST_DURATION=3600  # 1 hour default
      - CONCURRENT_USERS=10
      - RAMP_UP_TIME=300    # 5 minutes
    depends_on:
      - nginx-staging
    profiles:
      - load-test
    networks:
      - staging-network

  # Security Scanner
  security-scanner:
    image: owasp/zap2docker-stable:latest
    container_name: security-scanner
    command: >
      zap-full-scan.py 
      -t http://nginx-staging 
      -r security_scan_report.html
      -w security_scan_report.md
    volumes:
      - security-scan-results:/zap/wrk
    depends_on:
      - nginx-staging
    profiles:
      - security-test
    networks:
      - staging-network

volumes:
  postgres-staging-data:
    driver: local
  redis-staging-data:
    driver: local
  staging-models:
    driver: local
  staging-data:
    driver: local
  staging-logs:
    driver: local
  staging-outputs:
    driver: local
  prometheus-staging-data:
    driver: local
  grafana-staging-data:
    driver: local
  elasticsearch-staging-data:
    driver: local
  load-test-results:
    driver: local
  security-scan-results:
    driver: local

networks:
  staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16