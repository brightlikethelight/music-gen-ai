name: Test Microservices Architecture

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-services:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: user_management
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov httpx click rich
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Start microservices
      run: |
        # Create .env file
        cat > .env << EOL
        JWT_SECRET=test-secret-key
        SERVICE_API_KEY=test-service-key
        POSTGRES_PASSWORD=testpassword
        DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/user_management
        REDIS_URL=redis://localhost:6379/0
        EOL
        
        # Start services with docker-compose
        docker-compose -f docker-compose.microservices.yml up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
        
    - name: Check service health
      run: |
        # Check if API Gateway is responding
        max_attempts=30
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          if curl -f http://localhost:8000/health; then
            echo "API Gateway is healthy!"
            break
          fi
          echo "Waiting for API Gateway... (attempt $attempt/$max_attempts)"
          sleep 5
          ((attempt++))
        done
        
        # Check all services health
        curl -f http://localhost:8000/health/services || true
        
    - name: Run integration tests
      run: |
        pytest tests/test_complete_system.py -v --tb=short
        
    - name: Run demo CLI tests
      run: |
        python demo.py setup
        python demo.py quick-test
        
    - name: Test simple scripts
      run: |
        python simple_test.py
        
    - name: Show service logs on failure
      if: failure()
      run: |
        docker-compose -f docker-compose.microservices.yml logs
        
    - name: Stop services
      if: always()
      run: |
        docker-compose -f docker-compose.microservices.yml down -v

  test-individual-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, generation, audio-processing, user-management]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install service dependencies
      run: |
        cd services/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
        
    - name: Run service unit tests
      run: |
        cd services/${{ matrix.service }}
        # Add unit tests when available
        python -m pytest tests/ -v || echo "No unit tests yet for ${{ matrix.service }}"
        
    - name: Check service can start
      run: |
        cd services/${{ matrix.service }}
        python -m src.app &
        APP_PID=$!
        sleep 5
        kill $APP_PID || true

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check documentation files exist
      run: |
        echo "Checking documentation..."
        test -f README.md
        test -f DEMO_GUIDE.md
        test -f READY_TO_DEMO.md
        test -f docker-compose.microservices.yml
        test -x start_demo.sh
        test -x simple_start.sh
        echo "All documentation files present!"
        
    - name: Validate docker-compose files
      run: |
        docker-compose -f docker-compose.microservices.yml config
        
    - name: Check service structure
      run: |
        for service in api-gateway generation audio-processing user-management; do
          echo "Checking $service..."
          test -d services/$service
          test -f services/$service/Dockerfile
          test -f services/$service/requirements.txt
          test -d services/$service/src
          test -f services/$service/src/app.py
        done
        echo "All services have correct structure!"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        
    - name: Check for hardcoded secrets
      run: |
        # Simple check for common secret patterns
        ! grep -r "password.*=" --include="*.py" --exclude-dir=.git . | grep -v "test" | grep -v "demo" | grep -v "example"
        ! grep -r "secret.*=" --include="*.py" --exclude-dir=.git . | grep -v "test" | grep -v "demo" | grep -v "example"
        echo "No obvious hardcoded secrets found!"

  build-images:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build service images
      run: |
        # Build each service image
        for service in api-gateway generation audio-processing user-management; do
          echo "Building $service..."
          docker build -t music-gen-$service:test services/$service/
        done
        
    - name: List built images
      run: docker images | grep music-gen