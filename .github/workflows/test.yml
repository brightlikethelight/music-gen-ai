name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-monolith:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 music_gen tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 music_gen tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy music_gen --ignore-missing-imports || true
        
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=music_gen --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-microservices:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: user_management
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov httpx click rich
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Create test environment
      run: |
        cat > .env << EOL
        JWT_SECRET=test-secret-key
        SERVICE_API_KEY=test-service-key
        POSTGRES_PASSWORD=testpassword
        DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/user_management
        REDIS_URL=redis://localhost:6379/0
        EOL
        
    - name: Start microservices
      run: |
        docker-compose -f docker-compose.microservices.yml up -d
        echo "Waiting for services..."
        sleep 40
        
    - name: Check services health
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/health/services || true
        
    - name: Run microservices tests
      run: |
        pytest tests/test_complete_system.py -v
        
    - name: Test demo scripts
      run: |
        python demo.py setup
        python simple_test.py
        
    - name: Show logs on failure
      if: failure()
      run: |
        docker-compose -f docker-compose.microservices.yml logs
        
    - name: Stop services
      if: always()
      run: |
        docker-compose -f docker-compose.microservices.yml down -v

  test-cli:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install CLI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install click httpx rich
        
    - name: Test CLI commands
      run: |
        # Test monolith CLI
        music-gen --help
        music-gen generate --help
        
        # Test demo CLI
        python demo.py --help
        python demo.py setup --help

  test-notebooks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install jupyter nbconvert
        
    - name: Test Jupyter notebooks
      run: |
        # Convert notebooks to Python and test execution
        for notebook in notebooks/*.ipynb; do
          if [ -f "$notebook" ]; then
            echo "Testing $notebook..."
            jupyter nbconvert --to python "$notebook"
            # Run converted Python script (may fail for interactive notebooks)
            python "${notebook%.ipynb}.py" || true
          fi
        done

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-monolith, test-microservices]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install all dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install click httpx rich pytest pytest-asyncio
        
    - name: Run integration tests
      run: |
        # Run all integration tests
        pytest tests/integration/ -v || echo "No integration tests directory yet"
        pytest tests/e2e/ -v || echo "No e2e tests directory yet"
        
    - name: Test documentation examples
      run: |
        # Test that examples in documentation work
        python -m doctest README.md || true
        python -m doctest DEMO_GUIDE.md || true