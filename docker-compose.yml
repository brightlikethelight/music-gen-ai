# ⚠️ ACADEMIC PROJECT - EDUCATIONAL EXAMPLE ONLY
# This Docker Compose configuration is part of Harvard CS 109B coursework
# NOT tested for production use - FOR LEARNING PURPOSES ONLY

version: '3.8'

services:
  musicgen-api:
    build:
      context: .
      dockerfile: Dockerfile.academic
    ports:
      - "8000:8000"
    volumes:
      - ./outputs:/app/outputs
      - ./models:/app/models
    environment:
      - MODEL_NAME=facebook/musicgen-small
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEVICE=cpu
      - MAX_DURATION=300
      - OUTPUT_DIR=/app/outputs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./outputs:/var/www/outputs:ro
    depends_on:
      - musicgen-api
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - musicgen-api
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  grafana-storage: