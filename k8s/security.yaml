# ServiceAccount for MusicGen API
apiVersion: v1
kind: ServiceAccount
metadata:
  name: musicgen-sa
  namespace: musicgen

---
# ServiceAccount for Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: musicgen

---
# Secret for API keys and sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: musicgen-secrets
  namespace: musicgen
type: Opaque
stringData:
  api-key: "your-api-key-here"  # Replace with actual API key
  secret-key: "your-secret-key-here"  # Replace with actual secret key
  jwt-secret: "your-jwt-secret-here"  # Replace with JWT secret

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: musicgen-network-policy
  namespace: musicgen
spec:
  podSelector:
    matchLabels:
      app: musicgen-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: musicgen
    - podSelector:
        matchLabels:
          app: nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: musicgen
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS for model downloads
    - protocol: TCP
      port: 80   # HTTP
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS

---
# Role for MusicGen
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: musicgen-role
  namespace: musicgen
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]

---
# RoleBinding for MusicGen
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: musicgen-rolebinding
  namespace: musicgen
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: musicgen-role
subjects:
- kind: ServiceAccount
  name: musicgen-sa
  namespace: musicgen

---
# ClusterRole for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cr
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-crb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cr
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: musicgen

---
# PodSecurityPolicy (if PSPs are enabled)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: musicgen-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  - ALL
  volumes:
  - 'configMap'
  - 'emptyDir'
  - 'projected'
  - 'secret'
  - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'