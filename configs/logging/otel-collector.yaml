# OpenTelemetry Collector configuration for Music Gen AI
# 2024 best practices for unified observability (logs, traces, metrics)

receivers:
  # File log receiver for structured logs
  filelog/musicgen:
    include:
      - /var/log/musicgen/app.log
      - /var/log/musicgen/audit.log
      - /var/log/musicgen/performance.log
      - /var/log/musicgen/error.log
    
    # Parse JSON logs
    operators:
      - type: json_parser
        id: json_parser
        timestamp:
          parse_from: attributes.timestamp
          layout_type: strptime
          layout: '%Y-%m-%dT%H:%M:%S.%fZ'
      
      # Extract log level
      - type: move
        id: move_log_level
        from: attributes.levelname
        to: severity_text
      
      # Extract logger name
      - type: move
        id: move_logger
        from: attributes.name
        to: attributes["log.logger"]
      
      # Extract correlation ID for distributed tracing
      - type: move
        id: move_correlation_id
        from: attributes.correlation_id
        to: trace_id
      
      # Extract OpenTelemetry trace fields
      - type: move
        id: move_trace_id
        from: attributes.trace_id
        to: trace_id
        
      - type: move
        id: move_span_id
        from: attributes.span_id
        to: span_id
      
      # Add service information
      - type: add
        id: add_service_name
        field: resource["service.name"]
        value: "musicgen-api"
      
      - type: add
        id: add_service_version
        field: resource["service.version"]
        value: "${env:SERVICE_VERSION}"
      
      - type: add
        id: add_deployment_environment
        field: resource["deployment.environment"]
        value: "${env:ENVIRONMENT}"

  # OTLP receiver for direct application instrumentation
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://localhost:3000"
            - "https://*.musicgen.ai"

  # Prometheus receiver for metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'musicgen-api'
          static_configs:
            - targets: ['localhost:8000']
          scrape_interval: 30s
          metrics_path: /metrics

  # HTTP receiver for webhook logs
  httpd_json:
    endpoint: 0.0.0.0:8080
    format: json

  # Syslog receiver
  syslog:
    tcp:
      listen_address: "0.0.0.0:514"
    udp:
      listen_address: "0.0.0.0:514"
    protocol: rfc3164

processors:
  # Batch processor for performance
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128
    check_interval: 5s

  # Resource processor to add metadata
  resource:
    attributes:
      - key: service.name
        value: musicgen-api
        action: upsert
      - key: service.version
        from_attribute: SERVICE_VERSION
        action: insert
      - key: deployment.environment
        from_attribute: ENVIRONMENT
        action: insert
      - key: host.name
        from_attribute: HOSTNAME
        action: insert
      - key: log.source
        value: otel-collector
        action: insert

  # Transform processor for log enrichment
  transform/logs:
    log_statements:
      - context: log
        statements:
          # Add log type based on file path
          - set(attributes["log.type"], "application") where resource.attributes["log.file.path"] == "/var/log/musicgen/app.log"
          - set(attributes["log.type"], "audit") where resource.attributes["log.file.path"] == "/var/log/musicgen/audit.log"
          - set(attributes["log.type"], "performance") where resource.attributes["log.file.path"] == "/var/log/musicgen/performance.log"
          - set(attributes["log.type"], "error") where resource.attributes["log.file.path"] == "/var/log/musicgen/error.log"
          
          # Normalize severity levels
          - set(severity_number, 5) where severity_text == "DEBUG"
          - set(severity_number, 9) where severity_text == "INFO"
          - set(severity_number, 13) where severity_text == "WARNING" or severity_text == "WARN"
          - set(severity_number, 17) where severity_text == "ERROR"
          - set(severity_number, 21) where severity_text == "CRITICAL" or severity_text == "FATAL"
          
          # Extract HTTP information from performance logs
          - set(attributes["http.method"], attributes["method"]) where attributes["log.type"] == "performance"
          - set(attributes["http.route"], attributes["path"]) where attributes["log.type"] == "performance"
          - set(attributes["http.status_code"], attributes["status_code"]) where attributes["log.type"] == "performance"
          - set(attributes["http.response_time_ms"], attributes["duration_ms"]) where attributes["log.type"] == "performance"
          
          # Extract user information from audit logs
          - set(attributes["user.id"], attributes["user_id"]) where attributes["log.type"] == "audit"
          - set(attributes["source.ip"], attributes["ip_address"]) where attributes["log.type"] == "audit"
          - set(attributes["event.action"], attributes["event"]) where attributes["log.type"] == "audit"
          
          # Add alerting flags
          - set(attributes["alert.required"], true) where attributes["log.type"] == "error"
          - set(attributes["alert.required"], true) where attributes["log.type"] == "audit" and attributes["success"] == false
          - set(attributes["alert.required"], true) where attributes["log.type"] == "performance" and attributes["duration_ms"] > 5000

  # Attributes processor for sensitive data filtering
  attributes/filter_sensitive:
    actions:
      # Remove sensitive fields
      - key: password
        action: delete
      - key: api_key
        action: delete
      - key: authorization
        action: delete
      - key: secret
        action: delete
      - key: token
        action: delete
      
      # Redact sensitive values
      - key: email
        action: hash
      - key: credit_card
        action: delete

  # K8s attributes processor (if running in Kubernetes)
  k8sattributes:
    auth_type: "serviceAccount"
    passthrough: false
    filter:
      node_from_env_var: KUBE_NODE_NAME
    extract:
      metadata:
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.deployment.name
        - k8s.namespace.name
        - k8s.node.name
        - k8s.pod.start_time
      labels:
        - tag_name: k8s.pod.label.app
          key: app
          from: pod
        - tag_name: k8s.pod.label.version
          key: version
          from: pod

exporters:
  # Elasticsearch exporter for logs
  elasticsearch/logs:
    endpoints: ["${env:ELASTICSEARCH_HOST}:${env:ELASTICSEARCH_PORT}"]
    index: "musicgen-logs-%Y.%m.%d"
    
    # Authentication (if enabled)
    user: "${env:ELASTICSEARCH_USER}"
    password: "${env:ELASTICSEARCH_PASSWORD}"
    
    # TLS configuration
    tls:
      insecure: false
      ca_file: /etc/ssl/certs/elasticsearch-ca.crt
      cert_file: /etc/ssl/certs/elasticsearch-client.crt
      key_file: /etc/ssl/private/elasticsearch-client.key
    
    # Mapping configuration
    mapping:
      mode: "index_template"
      template_path: "/etc/otel/templates/musicgen-logs-template.json"
    
    # Retry configuration
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

  # Jaeger exporter for traces
  jaeger:
    endpoint: "${env:JAEGER_ENDPOINT}:14250"
    tls:
      insecure: true

  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: musicgen
    const_labels:
      environment: "${env:ENVIRONMENT}"
      service: musicgen-api

  # OTLP exporter for forwarding to other collectors
  otlp/upstream:
    endpoint: "${env:UPSTREAM_OTEL_ENDPOINT}"
    headers:
      api-key: "${env:UPSTREAM_API_KEY}"
    compression: gzip

  # File exporter for backup/debugging
  file/logs:
    path: /var/log/otel/logs.jsonl
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 10

  # Webhook exporter for alerts
  webhook/alerts:
    endpoint: "${env:ALERT_WEBHOOK_URL}"
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer ${env:ALERT_AUTH_TOKEN}"
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 60s
      max_elapsed_time: 300s

  # Datadog exporter (if using Datadog)
  datadog:
    api:
      key: "${env:DATADOG_API_KEY}"
      site: "${env:DATADOG_SITE}"
    
    hostname: "${env:HOSTNAME}"
    
    logs:
      endpoint: "${env:DATADOG_LOGS_ENDPOINT}"
    
    traces:
      endpoint: "${env:DATADOG_TRACES_ENDPOINT}"
    
    metrics:
      endpoint: "${env:DATADOG_METRICS_ENDPOINT}"

service:
  # Pipeline configuration
  pipelines:
    # Logs pipeline
    logs:
      receivers: [filelog/musicgen, httpd_json, syslog, otlp]
      processors: [memory_limiter, resource, transform/logs, attributes/filter_sensitive, batch]
      exporters: [elasticsearch/logs, file/logs]

    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, k8sattributes, batch]
      exporters: [jaeger, otlp/upstream]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, k8sattributes, batch]
      exporters: [prometheus, otlp/upstream]

    # Alerts pipeline for critical logs
    logs/alerts:
      receivers: [filelog/musicgen]
      processors: [memory_limiter, resource, transform/logs]
      exporters: [webhook/alerts]

  # Collector configuration
  extensions: [health_check, pprof, zpages]
  
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
    
  # Profiling extension
  pprof:
    endpoint: 0.0.0.0:1777
    
  # zPages extension for debugging
  zpages:
    endpoint: 0.0.0.0:55679

  # Telemetry configuration
  telemetry:
    logs:
      level: info
      development: false
      sampling:
        enabled: true
        tick: 10s
        initial: 5
        thereafter: 200
    
    metrics:
      level: detailed
      address: 0.0.0.0:8888
    
    traces:
      processors: ["batch"]

# Environment variables template:
# ELASTICSEARCH_HOST=localhost
# ELASTICSEARCH_PORT=9200
# ELASTICSEARCH_USER=elastic
# ELASTICSEARCH_PASSWORD=changeme
# JAEGER_ENDPOINT=localhost
# UPSTREAM_OTEL_ENDPOINT=https://api.honeycomb.io
# UPSTREAM_API_KEY=your-api-key
# ALERT_WEBHOOK_URL=https://hooks.slack.com/services/...
# ALERT_AUTH_TOKEN=your-token
# DATADOG_API_KEY=your-datadog-key
# DATADOG_SITE=datadoghq.com
# SERVICE_VERSION=1.0.0
# ENVIRONMENT=production
# HOSTNAME=musicgen-api-1