# Prometheus recording rules for Music Gen AI
# Pre-computed metrics for dashboards and alerting

groups:
  # API Performance Recording Rules
  - name: musicgen.api.performance
    interval: 30s
    rules:
      # Request rate by endpoint
      - record: musicgen:api_request_rate_5m
        expr: sum(rate(musicgen_http_requests_total[5m])) by (method, endpoint, status_code)
      
      # Error rate by endpoint
      - record: musicgen:api_error_rate_5m
        expr: |
          sum(rate(musicgen_http_requests_total{status_code=~"5.."}[5m])) by (method, endpoint)
          /
          sum(rate(musicgen_http_requests_total[5m])) by (method, endpoint)
      
      # API latency percentiles
      - record: musicgen:api_latency_p50_5m
        expr: histogram_quantile(0.50, sum(rate(musicgen_http_request_duration_seconds_bucket[5m])) by (method, endpoint, le))
      
      - record: musicgen:api_latency_p95_5m
        expr: histogram_quantile(0.95, sum(rate(musicgen_http_request_duration_seconds_bucket[5m])) by (method, endpoint, le))
      
      - record: musicgen:api_latency_p99_5m
        expr: histogram_quantile(0.99, sum(rate(musicgen_http_request_duration_seconds_bucket[5m])) by (method, endpoint, le))
      
      # Overall API availability
      - record: musicgen:api_availability_5m
        expr: |
          (
            sum(rate(musicgen_http_requests_total{status_code!~"5.."}[5m]))
            /
            sum(rate(musicgen_http_requests_total[5m]))
          ) * 100

  # Business Metrics Recording Rules
  - name: musicgen.business.metrics
    interval: 60s
    rules:
      # Music generation success rate
      - record: musicgen:generation_success_rate_5m
        expr: |
          sum(rate(musicgen_generation_requests_total{status="success"}[5m]))
          /
          sum(rate(musicgen_generation_requests_total[5m]))
      
      # Generation throughput by model
      - record: musicgen:generation_throughput_5m
        expr: sum(rate(musicgen_generation_requests_total[5m])) by (model)
      
      # Average generation time by model
      - record: musicgen:generation_duration_avg_5m
        expr: |
          sum(rate(musicgen_generation_duration_seconds_sum[5m])) by (model)
          /
          sum(rate(musicgen_generation_duration_seconds_count[5m])) by (model)
      
      # Model cache hit rate
      - record: musicgen:model_cache_hit_rate_5m
        expr: |
          sum(rate(musicgen_model_cache_hits_total[5m])) by (model)
          /
          (
            sum(rate(musicgen_model_cache_hits_total[5m])) by (model)
            +
            sum(rate(musicgen_model_cache_misses_total[5m])) by (model)
          )
      
      # User engagement metrics
      - record: musicgen:active_users_5m
        expr: count(count by (user_id)(rate(musicgen_user_sessions_total[5m]) > 0))
      
      # Generation errors by type
      - record: musicgen:generation_errors_rate_5m
        expr: sum(rate(musicgen_generation_errors_total[5m])) by (error_type, model)

  # System Resource Recording Rules
  - name: musicgen.system.resources
    interval: 30s
    rules:
      # CPU utilization
      - record: musicgen:cpu_utilization_5m
        expr: avg(musicgen_cpu_usage_percent{cpu_type="total"}) by (instance)
      
      # Memory utilization
      - record: musicgen:memory_utilization_5m
        expr: |
          (
            avg(musicgen_memory_usage_bytes{memory_type="used"}) by (instance)
            /
            avg(musicgen_memory_usage_bytes{memory_type="total"}) by (instance)
          ) * 100
      
      # GPU utilization (if available)
      - record: musicgen:gpu_utilization_5m
        expr: avg(musicgen_gpu_usage_percent{metric_type="utilization"}) by (instance, gpu_id)
      
      - record: musicgen:gpu_memory_utilization_5m
        expr: |
          (
            avg(musicgen_gpu_memory_usage_bytes{memory_type="used"}) by (instance, gpu_id)
            /
            avg(musicgen_gpu_memory_usage_bytes{memory_type="total"}) by (instance, gpu_id)
          ) * 100
      
      # Disk utilization
      - record: musicgen:disk_utilization_5m
        expr: avg(musicgen_disk_usage_percent) by (instance, mount_point)
      
      # Network I/O
      - record: musicgen:network_bytes_rate_5m
        expr: sum(rate(musicgen_network_bytes_total[5m])) by (instance, interface, direction)

  # Task Queue Recording Rules
  - name: musicgen.queue.metrics
    interval: 30s
    rules:
      # Queue processing rate
      - record: musicgen:queue_processing_rate_5m
        expr: sum(rate(musicgen_queue_tasks_total{status="completed"}[5m])) by (queue_name, task_type)
      
      # Queue failure rate
      - record: musicgen:queue_failure_rate_5m
        expr: |
          sum(rate(musicgen_queue_tasks_total{status="failed"}[5m])) by (queue_name, task_type)
          /
          sum(rate(musicgen_queue_tasks_total[5m])) by (queue_name, task_type)
      
      # Average queue processing time
      - record: musicgen:queue_processing_duration_avg_5m
        expr: |
          sum(rate(musicgen_queue_processing_duration_seconds_sum[5m])) by (queue_name, task_type)
          /
          sum(rate(musicgen_queue_processing_duration_seconds_count[5m])) by (queue_name, task_type)
      
      # Worker utilization
      - record: musicgen:worker_utilization_5m
        expr: avg(musicgen_queue_worker_utilization_percent) by (queue_name, worker_id)

  # SLI Recording Rules
  - name: musicgen.sli.metrics
    interval: 30s
    rules:
      # API SLI - Availability
      - record: musicgen:sli_api_availability_5m
        expr: musicgen:api_availability_5m
      
      # API SLI - Latency P95
      - record: musicgen:sli_api_latency_p95_5m
        expr: musicgen:api_latency_p95_5m
      
      # Generation SLI - Success Rate
      - record: musicgen:sli_generation_success_rate_5m
        expr: musicgen:generation_success_rate_5m * 100
      
      # Generation SLI - Latency P90
      - record: musicgen:sli_generation_latency_p90_5m
        expr: histogram_quantile(0.90, sum(rate(musicgen_generation_duration_seconds_bucket[5m])) by (le))
      
      # Model Load SLI - P99 Load Time
      - record: musicgen:sli_model_load_p99_5m
        expr: histogram_quantile(0.99, sum(rate(musicgen_model_load_duration_seconds_bucket[5m])) by (le))

  # Error Budget Recording Rules
  - name: musicgen.error_budget.metrics
    interval: 60s
    rules:
      # API availability error budget burn rate (1h)
      - record: musicgen:error_budget_api_availability_burn_rate_1h
        expr: |
          (1 - musicgen:sli_api_availability_5m / 100) * 
          (60 / 5) * 24  # Convert 5m rate to hourly burn rate for 30d SLO
      
      # Generation success rate error budget burn rate (1h)
      - record: musicgen:error_budget_generation_success_burn_rate_1h
        expr: |
          (1 - musicgen:sli_generation_success_rate_5m / 100) * 
          (60 / 5) * 24 * 7  # Convert to hourly burn rate for 7d SLO
      
      # Error budget remaining calculations
      - record: musicgen:error_budget_api_availability_remaining_30d
        expr: |
          max(0, 
            0.001 - (  # 0.1% error budget for 99.9% SLO
              (1 - avg_over_time(musicgen:sli_api_availability_5m[30d]) / 100)
            )
          )
      
      - record: musicgen:error_budget_generation_success_remaining_7d
        expr: |
          max(0,
            0.005 - (  # 0.5% error budget for 99.5% SLO
              (1 - avg_over_time(musicgen:sli_generation_success_rate_5m[7d]) / 100)
            )
          )

  # Aggregated Health Metrics
  - name: musicgen.health.overall
    interval: 60s
    rules:
      # Overall system health score
      - record: musicgen:system_health_score_5m
        expr: |
          (
            (musicgen:api_availability_5m / 100) * 0.3 +
            (1 - clamp_max(musicgen:api_latency_p95_5m / 5, 1)) * 0.2 +
            (musicgen:generation_success_rate_5m) * 0.3 +
            (1 - clamp_max(avg(musicgen:cpu_utilization_5m) / 100, 1)) * 0.1 +
            (1 - clamp_max(avg(musicgen:memory_utilization_5m) / 100, 1)) * 0.1
          ) * 100
      
      # Service availability (all critical components up)
      - record: musicgen:service_availability_5m
        expr: |
          min(
            min(up{job="musicgen-api"}),
            min(up{job="postgres"}),
            min(up{job="redis"})
          )
      
      # Total request volume
      - record: musicgen:total_request_volume_5m
        expr: sum(musicgen:api_request_rate_5m)
      
      # Total error volume
      - record: musicgen:total_error_volume_5m
        expr: sum(musicgen:api_error_rate_5m) * sum(musicgen:api_request_rate_5m)

  # Capacity Planning Metrics
  - name: musicgen.capacity.planning
    interval: 300s  # 5 minutes
    rules:
      # Resource utilization trends
      - record: musicgen:cpu_utilization_trend_1h
        expr: deriv(avg(musicgen:cpu_utilization_5m)[1h:])
      
      - record: musicgen:memory_utilization_trend_1h
        expr: deriv(avg(musicgen:memory_utilization_5m)[1h:])
      
      # Request rate growth
      - record: musicgen:request_rate_growth_1h
        expr: |
          (
            avg_over_time(musicgen:total_request_volume_5m[5m]) -
            avg_over_time(musicgen:total_request_volume_5m[1h] offset 1h)
          ) / 
          avg_over_time(musicgen:total_request_volume_5m[1h] offset 1h) * 100
      
      # Generation volume trend
      - record: musicgen:generation_volume_trend_1h
        expr: deriv(sum(musicgen:generation_throughput_5m)[1h:])
      
      # Storage growth rate
      - record: musicgen:storage_growth_rate_24h
        expr: |
          (
            avg(musicgen_disk_usage_bytes{usage_type="used"}) -
            avg(musicgen_disk_usage_bytes{usage_type="used"} offset 24h)
          ) / 
          avg(musicgen_disk_usage_bytes{usage_type="used"} offset 24h) * 100