# Prometheus Configuration for Staging Environment
# Optimized for load testing and comprehensive monitoring

global:
  scrape_interval: 10s
  evaluation_interval: 10s
  external_labels:
    environment: 'staging'
    cluster: 'musicgen-staging'

# Alertmanager configuration (disabled for staging)
# alerting:
#   alertmanagers:
#     - static_configs:
#         - targets:
#           - "alertmanager:9093"

# Load alerting rules for staging
rule_files:
  - "rules/staging_recording_rules.yml"
  - "alerts/staging_alerting_rules.yml"

# Scrape configurations for staging services
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s
    metrics_path: /metrics

  # Music Gen API instances
  - job_name: 'musicgen-api'
    static_configs:
      - targets: 
        - 'musicgen-api-1:8000'
        - 'musicgen-api-2:8000'
    scrape_interval: 5s  # More frequent for load testing
    scrape_timeout: 4s
    metrics_path: /metrics
    honor_labels: true
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
      - source_labels: [__address__]
        regex: '([^:]+):.*'
        target_label: service_instance
        replacement: '${1}'

  # Celery Workers
  - job_name: 'musicgen-workers'
    static_configs:
      - targets:
        - 'musicgen-worker-1:9091'
        - 'musicgen-worker-2:9091'
    scrape_interval: 15s
    metrics_path: /metrics

  # PostgreSQL monitoring
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter-staging:9187']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: database
        replacement: 'staging'

  # Redis monitoring
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter-staging:9121']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: redis_instance
        replacement: 'staging'

  # System metrics (Node Exporter)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter-staging:9100']
    scrape_interval: 10s

  # Container metrics (cAdvisor)
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor-staging:8080']
    scrape_interval: 10s
    metrics_path: /metrics

  # Nginx metrics (if nginx-exporter is added)
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx-staging:8081']  # Nginx stub_status
    scrape_interval: 15s
    metrics_path: /nginx_status
    relabel_configs:
      - source_labels: [__address__]
        target_label: load_balancer
        replacement: 'staging'

  # Load testing metrics
  - job_name: 'load-tester'
    static_configs:
      - targets: ['load-tester:9090']
    scrape_interval: 5s
    metrics_path: /metrics
    honor_labels: true

  # Business metrics from application
  - job_name: 'musicgen-business-metrics'
    static_configs:
      - targets: ['musicgen-api-1:8000', 'musicgen-api-2:8000']
    metrics_path: /api/v1/metrics/business
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        target_label: api_instance

  # SLI/SLO metrics
  - job_name: 'musicgen-slo-metrics'
    static_configs:
      - targets: ['musicgen-api-1:8000', 'musicgen-api-2:8000']
    metrics_path: /api/v1/metrics/slo
    scrape_interval: 15s

  # Flower (Celery monitoring)
  - job_name: 'flower'
    static_configs:
      - targets: ['flower-staging:5555']
    scrape_interval: 30s
    metrics_path: /metrics
    basic_auth:
      username: admin
      password: staging_flower_password

# Storage configuration for high-frequency metrics
storage:
  tsdb:
    path: /prometheus/data
    retention.time: 7d  # Shorter retention for staging
    retention.size: 50GB
    
    # Optimized for frequent writes during load testing
    min-block-duration: 30m
    max-block-duration: 2h
    
    # Enable WAL compression
    wal-compression: true
    wal-segment-size: 32MB

# Remote write configuration for long-term storage (optional)
# Useful for keeping load test results long-term
# remote_write:
#   - url: "http://prometheus-long-term:9090/api/v1/write"
#     queue_config:
#       capacity: 5000
#       max_shards: 100
#       min_shards: 1
#       max_samples_per_send: 1000
#       batch_send_deadline: 5s
#       min_backoff: 30ms
#       max_backoff: 100ms

# Recording rules for staging-specific aggregations
recording_rules:
  - name: staging.api.rules
    interval: 10s
    rules:
      # Request rate by endpoint
      - record: staging:api:request_rate_5m
        expr: rate(http_requests_total{job="musicgen-api"}[5m])
      
      # Error rate by endpoint
      - record: staging:api:error_rate_5m
        expr: rate(http_requests_total{job="musicgen-api",status=~"5.."}[5m]) / rate(http_requests_total{job="musicgen-api"}[5m])
      
      # Response time percentiles
      - record: staging:api:response_time_p95_5m
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="musicgen-api"}[5m]))
      
      - record: staging:api:response_time_p99_5m
        expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket{job="musicgen-api"}[5m]))

  - name: staging.system.rules
    interval: 15s
    rules:
      # CPU utilization
      - record: staging:system:cpu_utilization
        expr: 100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)
      
      # Memory utilization
      - record: staging:system:memory_utilization
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100
      
      # Disk utilization
      - record: staging:system:disk_utilization
        expr: (1 - (node_filesystem_avail_bytes{fstype!="tmpfs"} / node_filesystem_size_bytes{fstype!="tmpfs"})) * 100

  - name: staging.generation.rules
    interval: 30s
    rules:
      # Generation success rate
      - record: staging:generation:success_rate_10m
        expr: rate(musicgen_generation_requests_total{status="completed"}[10m]) / rate(musicgen_generation_requests_total[10m])
      
      # Average generation time
      - record: staging:generation:avg_time_10m
        expr: rate(musicgen_generation_duration_seconds_sum[10m]) / rate(musicgen_generation_duration_seconds_count[10m])
      
      # Queue depth
      - record: staging:generation:queue_depth
        expr: musicgen_generation_queue_size

# Alerting rules for staging environment
alerting_rules:
  - name: staging.critical
    rules:
      - alert: StagingAPIDown
        expr: up{job="musicgen-api"} == 0
        for: 30s
        labels:
          severity: critical
          environment: staging
        annotations:
          summary: "Staging API instance is down"
          description: "API instance {{ $labels.instance }} has been down for more than 30 seconds."

      - alert: StagingHighErrorRate
        expr: staging:api:error_rate_5m > 0.1
        for: 2m
        labels:
          severity: warning
          environment: staging
        annotations:
          summary: "High error rate in staging"
          description: "Error rate is {{ $value | humanizePercentage }} for {{ $labels.instance }}"

      - alert: StagingHighResponseTime
        expr: staging:api:response_time_p95_5m > 5
        for: 2m
        labels:
          severity: warning
          environment: staging
        annotations:
          summary: "High response time in staging"
          description: "95th percentile response time is {{ $value }}s for {{ $labels.instance }}"

      - alert: StagingSystemResourceHigh
        expr: staging:system:cpu_utilization > 90 or staging:system:memory_utilization > 90
        for: 5m
        labels:
          severity: warning
          environment: staging
        annotations:
          summary: "High system resource usage"
          description: "System resources are high on {{ $labels.instance }}: CPU={{ $labels.cpu }}%, Memory={{ $labels.memory }}%"

  - name: staging.load_testing
    rules:
      - alert: LoadTestRequestFailure
        expr: increase(http_requests_total{job="load-tester",status=~"5.."}[1m]) > 10
        for: 0s
        labels:
          severity: info
          environment: staging
        annotations:
          summary: "Load test detecting failures"
          description: "Load tester detected {{ $value }} failures in the last minute"

      - alert: LoadTestHighLatency
        expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket{job="load-tester"}[5m])) > 10
        for: 2m
        labels:
          severity: info
          environment: staging
        annotations:
          summary: "Load test detecting high latency"
          description: "99th percentile latency is {{ $value }}s during load testing"