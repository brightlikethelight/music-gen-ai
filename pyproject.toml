[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "music-gen-ai"
version = "0.1.0"
description = "Production-ready text-to-music generation system using transformer architecture with EnCodec tokenization"
authors = [
    {name = "Bright Liu", email = "your.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
]
dependencies = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "pytorch-lightning>=2.0.0",
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    "transformers>=4.30.0",
    "encodec>=0.1.1",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "wandb>=0.15.0",
    "librosa>=0.10.0",
    "numpy>=1.21.0",
    "scipy>=1.9.0",
    "pandas>=1.5.0",
    "scikit-learn>=1.2.0",
    "soundfile>=0.12.0",
    "pretty-midi>=0.2.9",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "python-json-logger>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
    "tensorboard>=2.13.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
]
deployment = [
    "docker>=6.0.0",
    "gunicorn>=20.0.0",
    "prometheus-client>=0.16.0",
    "opentelemetry-api>=1.17.0",
    "opentelemetry-sdk>=1.17.0",
    "opentelemetry-exporter-prometheus>=1.12.0",
]

[project.scripts]
music-gen = "music_gen.cli:main"
music-gen-train = "music_gen.training.cli:train"
music-gen-inference = "music_gen.inference.cli:generate"
music-gen-api = "music_gen.api.main:start_server"

[project.urls]
Homepage = "https://github.com/Bright-L01/music-gen-ai"
Repository = "https://github.com/Bright-L01/music-gen-ai"
Issues = "https://github.com/Bright-L01/music-gen-ai/issues"
Documentation = "https://github.com/Bright-L01/music-gen-ai/blob/main/README.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["music_gen*"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=music_gen",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "gpu: Tests requiring GPU",
]

[tool.coverage.run]
source = ["music_gen"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]